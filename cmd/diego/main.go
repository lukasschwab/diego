package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/lukasschwab/diego/internal/diego"
	"github.com/tailscale/hujson"
)

var (
	tmpl       *template.Template
	nativeTmpl *template.Template

	// TODO: use diego to parse these.
	// TODO: allow manually setting a prefix instead of using the struct name.
	typeName = flag.String("type", "", "name of the struct to generate a parser for")
)

func init() {
	var err error
	if tmpl, err = template.New("diego").Parse(diego.JSONTemplate); err != nil {
		log.Fatalf("error parsing template: %v", err)
	}
	if nativeTmpl, err = template.New("diego-native").Parse(diego.BaseTemplate); err != nil {
		log.Fatalf("error parsing native template: %v", err)
	}
}

func main() {
	flag.Parse()

	if *typeName != "" {
		gofile := os.Getenv("GOFILE")
		if gofile == "" {
			log.Fatalf("GOFILE env var must be set in -type mode")
		}
		gopackage := os.Getenv("GOPACKAGE")
		if gopackage == "" {
			log.Fatalf("GOPACKAGE env var must be set in -type mode")
		}

		templateSchema, err := diego.FromAst(gofile, *typeName)
		if err != nil {
			log.Fatalf("error parsing gofile: %v", err)
		}
		templateSchema.Package = gopackage

		if err := generateNative(gofile, templateSchema); err != nil {
			log.Fatal(err)
		}
		return
	}

	if len(flag.Args()) != 1 {
		log.Fatalf("Usage: %s <input.json>", os.Args[0])
	}
	source := flag.Arg(0)

	d, err := parseSchema(source)
	if err != nil {
		log.Fatal(err)
	}

	templateSchema, err := prepareSchema(d, source)
	if err != nil {
		log.Fatalf("error preparing diego schema for generation: %v", err)
	}

	if err := generate(source, templateSchema); err != nil {
		log.Fatal(err)
	}
}

func parseSchema(source string) (*diego.Schema, error) {
	d := new(diego.Schema)
	if jsonBytes, err := os.ReadFile(source); err != nil {
		return nil, fmt.Errorf("error reading source file: %v", err)
	} else if standardized, err := hujson.Standardize(jsonBytes); err != nil {
		return nil, fmt.Errorf("error standardizing source JSON: %v", err)
	} else if err := json.Unmarshal(standardized, d); err != nil {
		return nil, fmt.Errorf("error unmarshaling source JSON: %v", err)
	}
	return d, nil
}

func prepareSchema(d *diego.Schema, source string) (*diego.TemplateSchema, error) {
	prefix, err := diego.ValidatePrefix(d.EnvironmentPrefix)
	if err != nil {
		return nil, err
	}
	td := &diego.TemplateSchema{
		Package:    "main", // Assuming main for now, will need to be configurable
		StructName: diego.BuildGoName(d.EnvironmentPrefix) + "Vars",
		Source:     source,
		Flags:      make([]diego.TemplateFlag, len(d.Flags)),
		Prefix:     prefix,
	}
	for i, f := range d.Flags {
		td.Flags[i] = diego.TemplateFlag{
			Name:        f.Name,
			Description: f.Description,
			GoType:      f.Type,
			Prefix:      prefix,
		}
	}
	return td, nil
}

func generate(source string, prepared *diego.TemplateSchema) error {
	dest := source + ".go"
	var generated bytes.Buffer
	if err := tmpl.Execute(&generated, prepared); err != nil {
		return fmt.Errorf("error executing template: %v", err)
	}
	formatted, err := format.Source(generated.Bytes())
	if err != nil {
		return fmt.Errorf("error formatting generated code: %v\n%s", err, generated.String())
	}
	if err := os.WriteFile(dest, formatted, 0644); err != nil {
		return fmt.Errorf("error writing generated code to %s: %v", dest, err)
	}
	return nil
}

func generateNative(source string, prepared *diego.TemplateSchema) error {
	dest := strings.TrimSuffix(source, ".go") + "_args.go"
	var generated bytes.Buffer
	if err := nativeTmpl.Execute(&generated, prepared); err != nil {
		return fmt.Errorf("error executing native template: %v", err)
	}
	formatted, err := format.Source(generated.Bytes())
	if err != nil {
		return fmt.Errorf("error formatting generated code: %v\n%s", err, generated.String())
	}
	if err := os.WriteFile(dest, formatted, 0644); err != nil {
		return fmt.Errorf("error writing generated code to %s: %v", dest, err)
	}
	return nil
}
