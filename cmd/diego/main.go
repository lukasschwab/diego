package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"log"
	"os"
	"text/template"

	"github.com/lukasschwab/diego/internal/diego"
	"github.com/tailscale/hujson"
)

var tmpl *template.Template

func init() {
	var err error
	if tmpl, err = template.New("diego").Parse(diego.Template); err != nil {
		log.Fatalf("error parsing template: %v", err)
	}
}

func main() {
	if len(os.Args) != 2 {
		log.Fatalf("Usage: %s <input.json>", os.Args[0])
	}
	source := os.Args[1]

	if d, err := parseSchema(source); err != nil {
		log.Fatal(err)
	} else if templateSchema, err := prepareSchema(d, source); err != nil {
		log.Fatalf("error preparing diego schema for generation: %v", err)
	} else if err := generate(source, templateSchema); err != nil {
		log.Fatal(err)
	}
}

func parseSchema(source string) (*diego.Schema, error) {
	d := new(diego.Schema)
	if jsonBytes, err := os.ReadFile(source); err != nil {
		return nil, fmt.Errorf("error reading source file: %v", err)
	} else if standardized, err := hujson.Standardize(jsonBytes); err != nil {
		return nil, fmt.Errorf("error standardizing source JSON: %v", err)
	} else if err := json.Unmarshal(standardized, d); err != nil {
		return nil, fmt.Errorf("error unmarshaling source JSON: %v", err)
	}
	return d, nil
}

func prepareSchema(d *diego.Schema, source string) (*diego.TemplateSchema, error) {
	prefix, err := diego.ValidatePrefix(d.EnvironmentPrefix)
	if err != nil {
		return nil, err
	}
	td := &diego.TemplateSchema{
		Package:    "main", // Assuming main for now, will need to be configurable
		StructName: diego.BuildGoName(d.EnvironmentPrefix) + "Vars",
		Source:     source,
		Flags:      make([]diego.TemplateFlag, len(d.Flags)),
		Prefix:     prefix,
	}
	for i, f := range d.Flags {
		td.Flags[i] = diego.TemplateFlag{
			Name:        f.Name,
			Description: f.Description,
			GoType:      f.Type,
			Prefix:      prefix,
		}
	}
	return td, nil
}

func generate(source string, prepared *diego.TemplateSchema) error {
	dest := source + ".go"
	var generated bytes.Buffer
	if err := tmpl.Execute(&generated, prepared); err != nil {
		return fmt.Errorf("error executing template: %v", err)
	}
	formatted, err := format.Source(generated.Bytes())
	if err != nil {
		return fmt.Errorf("error formatting generated code: %v\n%s", err, generated.String())
	}
	if err := os.WriteFile(source+".go", formatted, 0644); err != nil {
		return fmt.Errorf("error writing generated code to %s: %v", dest, err)
	}
	return nil
}
