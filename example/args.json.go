// Code generated by diego; DO NOT EDIT.

package main

import (
	"errors"
	"flag"
	"fmt"

	"github.com/lukasschwab/diego/pkg/env"
)

// FooxampleVars generated from ./args.json.
type FooxampleVars struct {
	// --color: enable ANSI colors in CLI output
	Color bool `json:"color,omitempty"`
	// --verbose: enable verbose logging
	Verbose bool `json:"verbose,omitempty"`
	// --file: path of file to process
	File string `json:"file,omitempty"`
	// --workers: number of workers to use in parallel
	Workers int `json:"workers,omitempty"`
	// --read-only: do not write output to file
	ReadOnly bool `json:"read-only,omitempty"`
}

// Parse initializes the FooxampleVars from command-line and environment
// variables. Typically args should be os.Args[1:]; do not include the
// executable name.
func (base *FooxampleVars) Parse(args []string) error {
	return errors.Join(
		base.foldEnv(),
		base.foldArgs(args),
	)
}

func (base *FooxampleVars) foldEnv() error {
	var err error
	err = errors.Join(err, env.LookupBool(&base.Color, "FOOXAMPLE_COLOR"))
	err = errors.Join(err, env.LookupBool(&base.Verbose, "FOOXAMPLE_VERBOSE"))
	env.LookupString(&base.File, "FOOXAMPLE_FILE")
	err = errors.Join(err, env.LookupInt(&base.Workers, "FOOXAMPLE_WORKERS"))
	err = errors.Join(err, env.LookupBool(&base.ReadOnly, "FOOXAMPLE_READ_ONLY"))
	return err
}

func (base *FooxampleVars) foldArgs(args []string) error {
	fs := flag.NewFlagSet("fooxample", flag.ExitOnError)
	fs.BoolVar(&base.Color, "color", base.Color, "enable ANSI colors in CLI output [FOOXAMPLE_COLOR]")
	fs.BoolVar(&base.Verbose, "verbose", base.Verbose, "enable verbose logging [FOOXAMPLE_VERBOSE]")
	fs.StringVar(&base.File, "file", base.File, "path of file to process [FOOXAMPLE_FILE]")
	fs.IntVar(&base.Workers, "workers", base.Workers, "number of workers to use in parallel [FOOXAMPLE_WORKERS]")
	fs.BoolVar(&base.ReadOnly, "read-only", base.ReadOnly, "do not write output to file [FOOXAMPLE_READ_ONLY]")
	if err := fs.Parse(args); err != nil {
		return fmt.Errorf("failed to parse command line args: %w", err)
	}
	return nil
}
