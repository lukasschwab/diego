// Code generated by diego; DO NOT EDIT.

package {{ .Package }}

import (
	"errors"
	"flag"
	"fmt"

	"github.com/lukasschwab/diego/pkg/env"
)

// {{ .StructName }} generated from {{ .Source }}.
type {{ .StructName }} struct {
{{- range .Flags }}
	// --{{ .Name }}: {{ .Description }}
	{{ .GoName }} {{ .GoType }} `json:"{{ .Name }},omitempty"`
{{- end }}
}

// Parse initializes the {{ .StructName }} from command-line and environment
// variables. Typically args should be os.Args[1:]; do not include the
// executable name.
func (base *{{ .StructName }}) Parse(args []string) error {
	return errors.Join(
		base.foldEnv(),
		base.foldArgs(args),
	)
}

func (base *{{ .StructName }}) foldEnv() error {
	var err error
{{- range .Flags }}
	{{ .EnvLookup "err" }}
{{- end }}
	return err
}

func (base *{{ .StructName }}) foldArgs(args []string) error {
	fs := flag.NewFlagSet("{{ .Prefix }}", flag.ExitOnError)
{{- range .Flags }}
	fs.{{ .FlagVar }}(&base.{{ .GoName }}, "{{ .Name }}", base.{{ .GoName }}, "{{ .Description }} [{{ .EnvVar }}]")
{{- end }}
	if err := fs.Parse(args); err != nil {
		return fmt.Errorf("failed to parse command line args: %w", err)
	}
	return nil
}
